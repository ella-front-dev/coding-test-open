
// CodeUp 기초 100제 ( 1090 - 1099 )

/* 1090 - [종합]
    어떤 규칙에 따라 수를 순서대로 나열한 것을 수열이라고 한다.
    예를 들어
    2 6 18 54 162 486 ... 은
    2부터 시작해 이전에 만든 수에 3을 곱해 다음 수를 만든 수열이다.
    이러한 것을 수학에서는 앞뒤 수들의 비율이 같다고 하여
    등비(비율이 같다의 한문 말) 수열이라고 한다.

    등비 수열을 알게된 영일이는 갑자기 궁금해졌다.
    "그럼.... 13번째 나오는 수는 뭘까?"
    영일이는 프로그램을 만들어 더 큰 수도 자동으로 계산하고 싶어졌다.

    시작 값(a), 등비(r), 몇 번째인지를 나타내는 정수(n)가 입력될 때
    n번째 수를 출력하는 프로그램을 만들어보자.
*/
function func1090(a, r, n){
    let result = a
    for(let i = 1; i < n; i++){
        result = result*r
    }
    return result;
}
console.log(func1090(2, 3, 7))

/* 1091 - [종합]
    어떤 규칙에 따라 수를 순서대로 나열한 것을 수열이라고 한다.
    예를 들어
    1 -1 3 -5 11 -21 43 ... 은
    1부터 시작해 이전에 만든 수에 -2를 곱한 다음 1을 더해 다음 수를 만든 수열이다.
    이런 이상한 수열을 알게 된 영일이는 또 궁금해졌다.
    "그럼.... 13번째 나오는 수는 뭘까?"
    영일이는 물론 수학을 아주 잘하지만 이런 문제는 본 적이 거의 없었다...
    그래서 프로그램을 만들어 더 큰 수도 자동으로 계산하고 싶어졌다.

    시작 값(a), 곱할 값(m), 더할 값(d), 몇 번째인지를 나타내는 정수(n)가 입력될 때,
    n번째 수를 출력하는 프로그램을 만들어보자.
*/
function func1091(a, m, d, n){
    let result = a
    for(let i = 1; i < n; i++){
        result = (result * m) + d;
    }
    return result;
}
console.log(func1091(1, -2, 1, 8))

/* 1092 - [종합]
    온라인 채점시스템에는 초등학생, 중고등학생, 대학생, 대학원생,
    일반인, 군인, 프로그래머, 탑코더 등 아주 많은 사람들이 들어와 문제를 풀고 있는데,
    실시간 채점 정보는 메뉴의 채점기록(Judge Status)을 통해 살펴볼 수 있다.
    자! 여기서...잠깐..
    같은 날 동시에 가입한 3명의 사람들이 온라인 채점시스템에 들어와 문제를 푸는 날짜가
    매우 규칙적이라고 할 때, 다시 모두 함께 문제를 풀게 되는 그날은 언제일까?
    예를 들어 3명이 같은 날 가입/등업하고, 각각 3일마다, 7일마다, 9일마다
    한 번씩 들어온다면, 처음 가입하고 63일 만에 다시 3명이 함께 문제를 풀게 된다.

    갑자기 힌트?
    왠지 어려워 보이지 않는가?
    수학에서 배운 최소공배수를 생각한 사람들도 있을 것이다. 하지만, 정보에서 배우고 경험하는
    정보과학의 세상은 때때로 컴퓨터의 힘을 빌려 간단한 방법으로 해결할 수 있게 한다.

    아래의 코드를 읽고 이해한 후 도전해 보자.

    day는 날 수, a/b/c는 방문 주기이다.
    ...
    day=1;
    while(day%a!=0 || day%b!=0 || day%c!=0) day++; //이게 무슨 의미일까?
    printf(＂%d＂, day);
    ...

    물론, 아주 많은 다양한 방법이 있을 수 있다.

    정보과학의 문제해결에 있어서 정답은?
    하나가 아니라 주어진 시간/기억공간으로 정확한 결과를 얻을 수 있는 모든 방법이다.

    따라서, 모든 문제들에는 정답이 하나뿐만이 아니다.

    새로운, 더 빠른, 더 간단한 방법을 다양하게 생각해보고 도전해 볼 수 있다.
*/
function func1092(a, b, c){
    let day = 1
    while(day%a !== 0 || day%b !== 0 || day%c !== 0){
        day++
    }
    return day;
}
console.log(func1092(3 ,7 ,9))

/* 1093 - [1차원배열] 
    정보 선생님은 수업을 시작하기 전에 이상한 출석을 부른다.
    선생님은 출석부를 보고 번호를 부르는데,
    학생들의 얼굴과 이름을 빨리 익히기 위해 번호를 무작위(랜덤)으로 부른다.
    그리고 얼굴과 이름이 잘 기억되지 않는 학생들은 번호를 여러 번 불러
    이름과 얼굴을 빨리 익히려고 하는 것이다.
    출석 번호를 n번 무작위로 불렀을 때, 각 번호(1 ~ 23)가 불린 횟수를 각각 출력해보자.
*/
function func1093(n,arr){
    let list = new Array(23).fill(0);
    let result = null;

    for(let i in arr){
        list[arr[i]-1] = list[arr[i]-1]+1
    }
    for(let j in list){
        result = result + list[j] + " "
    }
    return result;
}
console.log(func1093(10 ,[1, 3, 2, 2, 5, 6, 7, 4, 5, 9]))

/* 1094 - [1차원배열] 
    정보 선생님은 수업을 시작하기 전에 이상한 출석을 부른다.
    학생들의 얼굴과 이름을 빨리 익히기 위해 번호를 무작위(랜덤)으로 부르는데,
    영일이는 선생님이 부른 번호들을 기억하고 있다가 거꾸로 불러보는 것을 해보고 싶어졌다.
    출석 번호를 n번 무작위로 불렀을 때, 부른 번호를 거꾸로 출력해 보자.
*/
function func1094(n,arr){
    let list  = new Array(n).fill(0);
    let result = "";
    for(let i in arr){
        list[i] = arr[(n-1)-i]
        console.log(arr[n-i])
    }
    for(let j in list){
        result = result + list[j] + " "
    }
    return result;
}
console.log(func1094(10 ,[10, 4, 2, 3, 6, 6, 7, 9, 8, 5]))

/* 1095 - [1차원배열] 
    정보 선생님은 오늘도 이상한 출석을 부른다.
    영일이는 오늘도 다른 생각을 해보았다.
    출석 번호를 다 부르지는 않은 것 같은데... 가장 빠른 번호가 뭐였지?
    출석 번호를 n번 무작위로 불렀을 때, 가장 빠른 번호를 출력해 보자.

    참고
    배열에 순서대로 기록해 두면, 기록된 내용을 모두 검사해 가장 작은 값을 찾아내면 된다.
    그런데, 가장 작은 값은 어떻게 어떤 것과 비교하고 찾아야 할까?
*/
function func1095(n,arr){
    let min = arr[0];
    for(let i in arr){
        if(min > arr[i]){
            min = arr[i]
        }
    }
    return min;
}
console.log(func1095(10 ,[10, 4, 2, 3, 6, 6, 7, 9, 8, 5]))

/* 1096 - [2차원배열] 
    기숙사 생활을 하는 학교에서 어떤 금요일(전원 귀가일)에는 모두 집으로 귀가를 한다.
    오랜만에 집에 간 영일이는 아버지와 함께 두던 매우 큰 오목에 대해서 생각해 보다가
    "바둑판에 돌을 올린 것을 프로그래밍 할 수 있을까?"하고 생각하였다.
    바둑판(19 * 19)에 n개의 흰 돌을 놓는다고 할 때,
    n개의 흰 돌이 놓인 위치를 출력하는 프로그램을 작성해보자.

    참고
    가로번호, 세로번호를 사용할 수 있는 2차원 배열을 사용하면
    이러한 형태를 쉽게 기록하고 사용할 수 있다. 물론 더 확장한 n차원 배열도 만들 수 있다.
*/
function func1097(n,arr){
    let min = arr[0];
    
    return min;
}
console.log(func1096(10 ,[10, 4, 2, 3, 6, 6, 7, 9, 8, 5]))