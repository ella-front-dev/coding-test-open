
// CodeUp 기초 100제 ( 1080 - 1089 )

/* 1080 - [종합]
    1, 2, 3 ... 을 계속 더해 나갈 때,
    그 합이 입력한 정수(0 ~ 1000)보다 같거나 작을 때까지
    계속 더하는 프로그램을 작성해보자.

    즉, 1부터 n까지 정수를 계속 더한다고 할 때,
    어디까지 더해야 입력한 수보다 같거나 커지는지 알아보고자 하는 문제이다.
*/
function func1080(n){
    let sum = 0;
    let result = 0;
    for(let i = 1; i < n; i++){
        if(n > sum){
            sum = sum + i
        }else{
            result = i-1
            break
        }
    }
    return result
}
console.log(func1080(55))

/* 1081 - [종합]
    1부터 n까지, 1부터 m까지 숫자가 적힌
    서로 다른 주사위 2개를 던졌을 때 나올 수 있는 모든 경우를 출력해보자.
*/
function func1081(n){
    let num = String(n).split(" ");
    let x = Number(num[0]);
    let y = Number(num[1]);
    let result = 0;
    for(let i = 1; i <= x; i++){
        for(let k = 1; k <= y; k++){
            result = result + i + " " + k + "\n"
        }
    }
    return result
}
console.log(func1081("2 3"))

/* 1082 - [종합]
    16진수(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F)를 배운
    영일(01)이는 16진수끼리 곱하는 16진수 구구단?에 대해서 궁금해졌다.
    A, B, C, D, E, F 중 하나가 입력될 때,
    1부터 F까지 곱한 16진수 구구단의 내용을 출력해보자.
    (단, A ~ F 까지만 입력된다.)
*/
function func1082(n){
    let num = parseInt(n, 16)
    let result = "";
    for(let i = 1; i < 16; i++){
        let chgMulti = num*i
        result = result + n +" * "+ i.toString(16).toUpperCase()+" = "+ chgMulti.toString(16).toUpperCase() + "\n"
    }
    return result
}
console.log(func1082("B"))

/* 1083 - [종합]
    3 6 9 게임을 하던 영일이는 3 6 9 게임에서 잦은 실수로 계속해서 벌칙을 받게 되었다.
    3 6 9 게임의 왕이 되기 위한 마스터 프로그램을 작성해 보자.
*/
function func1083(n){
    let result = "";
    for(let i = 1; i <= n; i++){
        if(i%3 === 0){
            result = result + "X" + " "
        }else{
            result = result + String(i)+" "
        }
    }
    return result
}
console.log(func1083(9))

/* 1084 - [종합]
    빨강(red), 초록(green), 파랑(blue) 빛을 섞어
    여러 가지 빛의 색을 만들어 내려고 한다.

    빨강(r), 초록(g), 파랑(b) 각각의 빛의 개수가 주어질 때,
    (빛의 강약에 따라 0 ~ n-1 까지 n가지의 빛 색깔을 만들 수 있다.)

    주어진 rgb 빛들을 다르게 섞어 만들 수 있는 모든 경우의 조합(r g b)과
    총 가짓 수를 계산해보자.
*/
function func1084(a,b,c){
    let result = "";
    let counter = 0;
    for(let i=0; i < a; i++){
        for(let j=0; j < b; j++){
            for(let k=0; k < c; k++){
                result = result + (i +" "+ j + " " + k + "\n");
                counter++
            }
        }
    }
    return result + counter
}
console.log(func1084(2,2,2))

/* 1085 - [종합]
    소리가 컴퓨터에 저장될 때에는 디지털 데이터화 되어 저장된다.
    마이크를 통해 1초에 적게는 수십 번, 많게는 수만 번 소리의 강약을 체크해
    그 값을 정수값으로 바꾸고, 그 값을 저장해 소리를 파일로 저장할 수 있다.
    값을 저장할 때에는 비트를 사용하는 정도에 따라 세세한 녹음 정도를 결정할 수 있고,
    좌우(스테레오) 채널로 저장하면 2배… 5.1채널이면 6배의 저장공간이 필요하고,
    녹음 시간이 길면 그 만큼 더 많은 저장공간이 필요하다.
    1초 동안 마이크로 소리강약을 체크하는 수를 h
    (헤르쯔, Hz 는 1초에 몇 번? 체크하는가를 의미한다.)
    한 번 체크한 결과를 저장하는 비트 b
    (2비트를 사용하면 0 또는 1 두 가지, 16비트를 사용하면 65536가지..)
    좌우 등 소리를 저장할 트랙 개수인 채널 c
    (모노는 1개, 스테레오는 2개의 트랙으로 저장함을 의미한다.)
    녹음할 시간 s가 주어질 때,
    필요한 저장 용량을 계산하는 프로그램을 작성해보자.
    실제로 일반적인 CD 음질(44.1KHz, 16bit, 스테레오)로 1초 동안 저장하려면
    44100 * 16 * 2 * 1 bit의 저장공간이 필요하다.
    이렇게 녹음하는 방식을 PCM(Pulse Code Modulation) 방법이라고 하는데,
    압축하지 않은 순수한(raw) 소리 데이터 파일은 대표적으로 *.wav 가 있다.
  
    **
        8 bit(비트)           = 1byte(바이트)     //       8bit=1Byte
    1024 Byte(210 byte) = 1KB(킬로 바이트) // 1024bit=1KB
    1024 KB(210 KB)      = 1MB(메가 바이트)
    1024 MB(210 MB)     = 1GB(기가 바이트)
    1024 GB(210 GB)      = 1TB(테라 바이트)
*/
function func1085(h,b,c,s){
    let result = 0;
    result = ((h*b*c*s)/8)/(1024*1024)
    return (Math.round(result*10)/10) + " MB"
}
console.log(func1085(44100,16,2,10))

/* 1086 - [종합]
이미지가 컴퓨터에 저장될 때에도 디지털 데이터화 되어 저장된다.

가장 기본적인 방법으로는 그림을 구성하는 한 점(pixel, 픽셀)의 색상을
빨강(r), 초록(g), 파랑(b)의 3가지의 빛의 세기 값으로 따로 변환하여 저장하는 것인데,

예를 들어 r, g, b 각 색에 대해서 8비트(0~255, 256가지 가능)씩을 사용한다고 하면,

한 점의 색상은 3가지 r, g, b의 8비트+8비트+8비트로 총 24비트로 표현해서
총 2^24 가지의 서로 다른 빛의 색깔을 사용할 수 있는 것이다.

그렇게 저장하는 점을 모아 하나의 큰 이미지를 저장할 수 있게 되는데,
1024 * 768 사이즈에 각 점에 대해 24비트로 저장하면 그 이미지를 저장하기 위한
저장 용량을 계산할 수 있다.

이렇게 이미지의 원래(raw) 데이터를 압축하지 않고 그대로 저장하는 대표적인 이미지 파일이
*.bmp 파일이며, 비트로 그림을 구성한다고 하여 비트맵 방식 또는 래스터 방식이라고 한다.

이미지의 가로 해상도 w, 세로 해상도 h, 한 픽셀을 저장하기 위한 비트 b 가 주어질 때,
압축하지 않고 저장하기 위해 필요한 저장 용량을 계산하는 프로그램을 작성해 보자.

예를 들어
일반적인 1024 * 768 사이즈(해상도)의 각점에 대해
24비트(rgb 각각 8비트씩 3개)로 저장하려면 1024 * 768 * 24 bit의 저장 용량이 필요하다.
실제 그런지 확인하고 싶다면, 간단한 그림 편집/수정 프로그램을 통해 확인할 수 있다.

**
      8 bit(비트)           = 1byte(바이트)     //       8bit=1Byte
1024 Byte(210 byte) = 1KB(킬로 바이트) // 1024bit=1KB
1024 KB(210 KB)      = 1MB(메가 바이트)
1024 MB(210 MB)     = 1GB(기가 바이트)
1024 GB(210 GB)      = 1TB(테라 바이트)
*/
function func1086(w, h, b){
    let result = 0;
    result = ((w*h*b)/8)/(1024*1024)
    return (Math.round(result*100)/100) + " MB"
}
console.log(func1086(1024,768,24))

/* 1087 - [종합]
    1, 2, 3 ... 을 순서대로 계속 더해나갈 때,
    그 합이 입력한 정수보다 작을 동안만 계속 더하는 프로그램을 작성해보자.

    즉, 1부터 n까지 정수를 계속 더한다고 할 때,
    어디까지 더해야 입력한 수보다 같거나 커지는지 알아보고자 하는 문제이다.

    하지만, 이번에는 그 때의 합을 출력해야 한다.

    예를 들어 57을 입력하면
    1+2+3+...+8+9+10=55에 다시 11을 더해 66이 될 때,
    그 값 66이 출력되어야 한다.
*/
function func1087(n){
    let result = 0;
    let sum = 0;
    for(let i = 1; i < n ; i++){
        if(n > sum){
            sum = sum + i;
        }else{
            result = sum
            break;
        }
    }
    return result;
}
console.log(func1087(57))

/* 1088 - [종합]
    1부터 입력한 정수까지 1씩 증가시켜 출력하는 프로그램을 작성하되,
    3의 배수인 경우는 출력하지 않도록 만들어보자.

    예를 들면,
    1 2 4 5 7 8 10 11 13 14 ...
    와 같이 출력하는 것이다.
*/
function func1088(n){
    let result = 0;
    for(let i=1; i <= n ; i++){
        if(i%3 === 0){
            continue;
        }else{
            result = result + i + " "
        }
    }
    return result;
}
console.log(func1088(10))

/* 1089 - [종합]
    어떤 규칙에 따라 수를 순서대로 나열한 것을 수열(series)이라고 한다.
    예를 들어
    1 4 7 10 13 16 19 22 25 ... 은
    1부터 시작해 이전에 만든 수에 3을 더해 다음 수를 만든 수열이다.
    이러한 것을 수학에서는 앞뒤 수들의 차이가 같다고 하여
    등차(차이가 같다의 한문 말) 수열이라고 한다.
    수열을 알게 된 영일이는 갑자기 궁금해졌다.
    "그럼.... 123번째 나오는 수는 뭘까?"
    영일이는 프로그램을 만들어 더 큰 수도 자동으로 계산하고 싶어졌다.

    시작 값(a), 등차(d), 몇 번째인지를 나타내는 정수(n)가 입력될 때
    n번째 수를 출력하는 프로그램을 만들어보자.
*/
function func1089(a, b, n){
    let result = a
    for(let i = 1; i < n; i++){
        result = a +(b*i)
    }
    return result;
}
console.log(func1089(1,3,5))

